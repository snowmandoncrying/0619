답변 추가 - 실제로는 리다이렉트 되고 있는 것이다. (새로고침)
	컨트롤로 갔다가 데이터 베이스에 답변이 저장되고 다시 돌아오는 것

# 편의성

@ 앵커 기능 

	a 태그 - anchor
	해당 위치로 빠르게 스크롤을 내려준다.
	원하는 위치로 돌아오는 것. 스크립트를 이용한 방식, 에이잭스를 이용한 방식. 근데 스크립트는 오류가 자주 발생한다. >> 스프링 부트로 해결 가능 >> 앵커 기능
	파라미터로 샵이 들어감. 새로운 기능을 추가

<a th:id="|answer_${answer.id}|"></a>
id라는 html 속성을 추가한 것. id는 모두 다 달라야한다. 중복 가능한 것은 class 뿐이다.
해당 태그를 구별하는 유일한 것. 고유 이름 부여. 모든 답변에게 다른 id를 부여하기 위해서 a 태그 사용
이 id가 고유 위치를 가지고 있으니까 앵커가 이 답변을 찾아서 스크롤을 이동하는 것이다.

http://localhost:8080/question/detail/338#answer_74
샾 뒤에 앵커를 찾아감 a태그의 id부분을 알려줌

url 분석 -- 페이지 카피 때 제일 먼저 하는 작업 


		
@ 검색 기능

	제목으로 검색을 할지, 내용, 작성자로 검색할지
	subject, content, username
	통합검색 / 셀렉트 박스 
	
	3개 테이블을 검색을 해서 4개 컬럼을 검색 
	조인 기능
	근데 jpa 안에서 쿼리문을 사용하는 태그가 있음. (불편함을 극복한거지만 실무에서는 마이바티스를 더 쓰기도 함)

	dept 테이블  emp 테이블
	레프트 조인은 왼쪽 테이블 기준으로 모든 걸 검색하라는 뜻

	키워드를 디폴트를 빈 공백으로 검색하도록 함 --> 그러면 모든 검색 결과가 나옴
	전체 리스트와 검색을 같이 사용하도록 할거임

	<form th:action="@{/question/list}" method="get"  id="searchFrom">
			<input type="hidden" id="kw" name="kw" th:value="${kw}">
			<input type="hidden" id="page" name="page" th:value="${questionList.number}">
	</form>

	페이지가 바뀌더라도 검색 결과 내용이 유지되도록 --> 키워드가 가지고 있는 검색 리스트가 나와야 한다. 그래서 페이지번호랑 키워드랑 같이 보내는 것이다
	검색 결과가 많이 나왔을 때 키워드도 같이 가져가야함 --> 두개씩 들고 다녀야한다
	그래서 히든 값으로 둘을 같이 넣은 것이다
	키워드는 어차피 검색을 안하면 빈 공백이 들어가니까 같이 보내도 된다.

	리스트에서 th:href를 스크립트로 변경


const btn_search = document.getElementById("btn_search");
	btn_search.addEventListener("click", function(){
		document.getElementById("kw").value=document.getElementById("search_kw").value;
		document.getElementById("page").value=0;
		document.getElementById("searchForm").submit();
	});

	사용자가 입력한 키워드 밸류를 
	페이지 번호를 0번으로...

### HTML 요소들
먼저, 이 코드에는 HTML 요소들이 포함되어 있어. 여기에서 몇 가지 중요한 요소들을 알아볼게:

1. `btn_search`라는 버튼이 있어.
2. `search_kw`라는 텍스트 입력 상자가 있어.
3. `kw`라는 숨겨진 입력 상자가 있어.
4. `page`라는 숨겨진 입력 상자가 있어.
5. `searchForm`이라는 폼(form)이 있어.

### 코드 설명
이제 이 코드를 한 줄씩 설명해볼게.

1. **첫 번째 줄**: `const btn_search = document.getElementById("btn_search");`
   - 이 줄은 `btn_search`라는 버튼을 찾는 거야. `document.getElementById("btn_search")`는 HTML 문서에서 `id`가 `btn_search`인 요소를 찾아서 `btn_search` 변수에 저장해.

2. **두 번째 줄**: `btn_search.addEventListener("click", function(){`
   - 이 줄은 `btn_search` 버튼을 클릭했을 때 어떤 일을 할지 정하는 거야. `btn_search` 버튼을 클릭하면, 뒤에 나오는 함수(`function(){ ... }`)가 실행돼.

3. **세 번째 줄**: `document.getElementById("kw").value=document.getElementById("search_kw").value;`
   - 이 줄은 `kw`라는 숨겨진 입력 상자의 값을 `search_kw` 텍스트 입력 상자의 값으로 바꿔줘. 쉽게 말해서, 우리가 `search_kw`에 적은 글씨가 `kw`에도 들어가는 거야.

4. **네 번째 줄**: `document.getElementById("page").value=0;`
   - 이 줄은 `page`라는 숨겨진 입력 상자의 값을 `0`으로 설정해. 즉, 검색 결과의 첫 페이지를 보여주기 위해 페이지 번호를 0으로 초기화하는 거야.

5. **다섯 번째 줄**: `document.getElementById("searchForm").submit();`
   - 마지막으로, `searchForm`이라는 폼을 제출(submit)해. 그러면 우리가 검색한 내용이 서버로 보내져서 검색 결과를 보여주게 돼.

### 정리
이 코드는 `btn_search` 버튼을 클릭했을 때:

1. `search_kw`에 입력한 값을 `kw`에 복사하고,
2. 페이지 번호를 0으로 설정하고,
3. `searchForm`을 제출해서 검색을 시작하는 거야.

쉽게 말하면, 이 코드는 검색어를 입력하고 검색 버튼을 누르면 우리가 입력한 내용으로 검색을 시작하는 일을 해주는 거야!



	@Query("select distinct q from question q"+ 
				" left outer join SiteUser u1 on q.author=u1"+
				" left outer join Answer a on a.question=q"+
				" left outer join SiteUser u2 on a.author=u2"+
					" where " + 
					" q.subject like %:kw%"+
					" or q.content like %:kw%"+
					" or u1.username like %:kw%"+
					" or a.content like %:kw%"+
					" or u2.username like %:kw%")
	
	Page<QuestionEntity> findAllByKeyword(@Param("kw")String kw ,Pageable pageable);

쿼리문을 직접 작성한 것

매개변수로 받는 키워드는 파람을 꼭 써줘야한다. 콜론 키워드 자리에 들어간다 --> 그러면서 검색이 됨 
